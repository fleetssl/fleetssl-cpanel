// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: letsencrypt.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Service Certs
type ServiceCertSetEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewState bool `protobuf:"varint,1,opt,name=new_state,json=newState,proto3" json:"new_state,omitempty"`
}

func (x *ServiceCertSetEnabledRequest) Reset() {
	*x = ServiceCertSetEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceCertSetEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceCertSetEnabledRequest) ProtoMessage() {}

func (x *ServiceCertSetEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceCertSetEnabledRequest.ProtoReflect.Descriptor instead.
func (*ServiceCertSetEnabledRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceCertSetEnabledRequest) GetNewState() bool {
	if x != nil {
		return x.NewState
	}
	return false
}

type ServiceCertSetEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ServiceCertSetEnabledResponse) Reset() {
	*x = ServiceCertSetEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceCertSetEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceCertSetEnabledResponse) ProtoMessage() {}

func (x *ServiceCertSetEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceCertSetEnabledResponse.ProtoReflect.Descriptor instead.
func (*ServiceCertSetEnabledResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceCertSetEnabledResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ServiceCertListDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServiceCertListDomainsRequest) Reset() {
	*x = ServiceCertListDomainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceCertListDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceCertListDomainsRequest) ProtoMessage() {}

func (x *ServiceCertListDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceCertListDomainsRequest.ProtoReflect.Descriptor instead.
func (*ServiceCertListDomainsRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{3}
}

type ServiceCertListDomainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors  []*Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	Domains []string `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
}

func (x *ServiceCertListDomainsResponse) Reset() {
	*x = ServiceCertListDomainsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceCertListDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceCertListDomainsResponse) ProtoMessage() {}

func (x *ServiceCertListDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceCertListDomainsResponse.ProtoReflect.Descriptor instead.
func (*ServiceCertListDomainsResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{4}
}

func (x *ServiceCertListDomainsResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ServiceCertListDomainsResponse) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

type ServiceCertAddDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
}

func (x *ServiceCertAddDomainRequest) Reset() {
	*x = ServiceCertAddDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceCertAddDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceCertAddDomainRequest) ProtoMessage() {}

func (x *ServiceCertAddDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceCertAddDomainRequest.ProtoReflect.Descriptor instead.
func (*ServiceCertAddDomainRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{5}
}

func (x *ServiceCertAddDomainRequest) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

type ServiceCertAddDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ServiceCertAddDomainResponse) Reset() {
	*x = ServiceCertAddDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceCertAddDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceCertAddDomainResponse) ProtoMessage() {}

func (x *ServiceCertAddDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceCertAddDomainResponse.ProtoReflect.Descriptor instead.
func (*ServiceCertAddDomainResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{6}
}

func (x *ServiceCertAddDomainResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ServiceCertRemoveDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
}

func (x *ServiceCertRemoveDomainRequest) Reset() {
	*x = ServiceCertRemoveDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceCertRemoveDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceCertRemoveDomainRequest) ProtoMessage() {}

func (x *ServiceCertRemoveDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceCertRemoveDomainRequest.ProtoReflect.Descriptor instead.
func (*ServiceCertRemoveDomainRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceCertRemoveDomainRequest) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

type ServiceCertRemoveDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ServiceCertRemoveDomainResponse) Reset() {
	*x = ServiceCertRemoveDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceCertRemoveDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceCertRemoveDomainResponse) ProtoMessage() {}

func (x *ServiceCertRemoveDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceCertRemoveDomainResponse.ProtoReflect.Descriptor instead.
func (*ServiceCertRemoveDomainResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{8}
}

func (x *ServiceCertRemoveDomainResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ServiceCertResetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServiceCertResetRequest) Reset() {
	*x = ServiceCertResetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceCertResetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceCertResetRequest) ProtoMessage() {}

func (x *ServiceCertResetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceCertResetRequest.ProtoReflect.Descriptor instead.
func (*ServiceCertResetRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{9}
}

type ServiceCertResetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ServiceCertResetResponse) Reset() {
	*x = ServiceCertResetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceCertResetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceCertResetResponse) ProtoMessage() {}

func (x *ServiceCertResetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceCertResetResponse.ProtoReflect.Descriptor instead.
func (*ServiceCertResetResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{10}
}

func (x *ServiceCertResetResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

// AutoSSL
type AutoSSLSetEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewState bool `protobuf:"varint,1,opt,name=new_state,json=newState,proto3" json:"new_state,omitempty"`
}

func (x *AutoSSLSetEnabledRequest) Reset() {
	*x = AutoSSLSetEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoSSLSetEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoSSLSetEnabledRequest) ProtoMessage() {}

func (x *AutoSSLSetEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoSSLSetEnabledRequest.ProtoReflect.Descriptor instead.
func (*AutoSSLSetEnabledRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{11}
}

func (x *AutoSSLSetEnabledRequest) GetNewState() bool {
	if x != nil {
		return x.NewState
	}
	return false
}

type AutoSSLSetEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *AutoSSLSetEnabledResponse) Reset() {
	*x = AutoSSLSetEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoSSLSetEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoSSLSetEnabledResponse) ProtoMessage() {}

func (x *AutoSSLSetEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoSSLSetEnabledResponse.ProtoReflect.Descriptor instead.
func (*AutoSSLSetEnabledResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{12}
}

func (x *AutoSSLSetEnabledResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type AutoSSLRunForUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User  string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Retry bool   `protobuf:"varint,2,opt,name=retry,proto3" json:"retry,omitempty"`
}

func (x *AutoSSLRunForUserRequest) Reset() {
	*x = AutoSSLRunForUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoSSLRunForUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoSSLRunForUserRequest) ProtoMessage() {}

func (x *AutoSSLRunForUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoSSLRunForUserRequest.ProtoReflect.Descriptor instead.
func (*AutoSSLRunForUserRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{13}
}

func (x *AutoSSLRunForUserRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AutoSSLRunForUserRequest) GetRetry() bool {
	if x != nil {
		return x.Retry
	}
	return false
}

type AutoSSLRunForUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors       []*Error          `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	Certificates []*SSLCertificate `protobuf:"bytes,2,rep,name=certificates,proto3" json:"certificates,omitempty"`
	Debug        map[string]string `protobuf:"bytes,3,rep,name=debug,proto3" json:"debug,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AutoSSLRunForUserResponse) Reset() {
	*x = AutoSSLRunForUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoSSLRunForUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoSSLRunForUserResponse) ProtoMessage() {}

func (x *AutoSSLRunForUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoSSLRunForUserResponse.ProtoReflect.Descriptor instead.
func (*AutoSSLRunForUserResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{14}
}

func (x *AutoSSLRunForUserResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *AutoSSLRunForUserResponse) GetCertificates() []*SSLCertificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *AutoSSLRunForUserResponse) GetDebug() map[string]string {
	if x != nil {
		return x.Debug
	}
	return nil
}

// SSL
type SSLCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain   string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	AltNames []string `protobuf:"bytes,2,rep,name=alt_names,json=altNames,proto3" json:"alt_names,omitempty"`
	Url      string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	CertId   string   `protobuf:"bytes,4,opt,name=cert_id,json=certId,proto3" json:"cert_id,omitempty"`
	KeyId    string   `protobuf:"bytes,5,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Expiry   int64    `protobuf:"varint,6,opt,name=expiry,proto3" json:"expiry,omitempty"`
	CertPem  string   `protobuf:"bytes,7,opt,name=cert_pem,json=certPem,proto3" json:"cert_pem,omitempty"`
}

func (x *SSLCertificate) Reset() {
	*x = SSLCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLCertificate) ProtoMessage() {}

func (x *SSLCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLCertificate.ProtoReflect.Descriptor instead.
func (*SSLCertificate) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{15}
}

func (x *SSLCertificate) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *SSLCertificate) GetAltNames() []string {
	if x != nil {
		return x.AltNames
	}
	return nil
}

func (x *SSLCertificate) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SSLCertificate) GetCertId() string {
	if x != nil {
		return x.CertId
	}
	return ""
}

func (x *SSLCertificate) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SSLCertificate) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *SSLCertificate) GetCertPem() string {
	if x != nil {
		return x.CertPem
	}
	return ""
}

type SSLListCertificatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *SSLListCertificatesRequest) Reset() {
	*x = SSLListCertificatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLListCertificatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLListCertificatesRequest) ProtoMessage() {}

func (x *SSLListCertificatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLListCertificatesRequest.ProtoReflect.Descriptor instead.
func (*SSLListCertificatesRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{16}
}

func (x *SSLListCertificatesRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type SSLListCertificatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors       []*Error          `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	Certificates []*SSLCertificate `protobuf:"bytes,2,rep,name=certificates,proto3" json:"certificates,omitempty"`
}

func (x *SSLListCertificatesResponse) Reset() {
	*x = SSLListCertificatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLListCertificatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLListCertificatesResponse) ProtoMessage() {}

func (x *SSLListCertificatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLListCertificatesResponse.ProtoReflect.Descriptor instead.
func (*SSLListCertificatesResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{17}
}

func (x *SSLListCertificatesResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *SSLListCertificatesResponse) GetCertificates() []*SSLCertificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

type SSLIssueCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User  string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *SSLIssueCertificateRequest) Reset() {
	*x = SSLIssueCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLIssueCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLIssueCertificateRequest) ProtoMessage() {}

func (x *SSLIssueCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLIssueCertificateRequest.ProtoReflect.Descriptor instead.
func (*SSLIssueCertificateRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{18}
}

func (x *SSLIssueCertificateRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SSLIssueCertificateRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type SSLIssueCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors          []*Error          `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	NewCertificates []*SSLCertificate `protobuf:"bytes,2,rep,name=new_certificates,json=newCertificates,proto3" json:"new_certificates,omitempty"`
	Debug           map[string]string `protobuf:"bytes,3,rep,name=debug,proto3" json:"debug,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SSLIssueCertificateResponse) Reset() {
	*x = SSLIssueCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLIssueCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLIssueCertificateResponse) ProtoMessage() {}

func (x *SSLIssueCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLIssueCertificateResponse.ProtoReflect.Descriptor instead.
func (*SSLIssueCertificateResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{19}
}

func (x *SSLIssueCertificateResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *SSLIssueCertificateResponse) GetNewCertificates() []*SSLCertificate {
	if x != nil {
		return x.NewCertificates
	}
	return nil
}

func (x *SSLIssueCertificateResponse) GetDebug() map[string]string {
	if x != nil {
		return x.Debug
	}
	return nil
}

type SSLRemoveCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Names       []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	OnlyManaged bool     `protobuf:"varint,3,opt,name=only_managed,json=onlyManaged,proto3" json:"only_managed,omitempty"`
}

func (x *SSLRemoveCertificateRequest) Reset() {
	*x = SSLRemoveCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLRemoveCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLRemoveCertificateRequest) ProtoMessage() {}

func (x *SSLRemoveCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLRemoveCertificateRequest.ProtoReflect.Descriptor instead.
func (*SSLRemoveCertificateRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{20}
}

func (x *SSLRemoveCertificateRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SSLRemoveCertificateRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *SSLRemoveCertificateRequest) GetOnlyManaged() bool {
	if x != nil {
		return x.OnlyManaged
	}
	return false
}

type SSLRemoveCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors  []*Error          `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	Removed []*SSLCertificate `protobuf:"bytes,2,rep,name=removed,proto3" json:"removed,omitempty"`
}

func (x *SSLRemoveCertificateResponse) Reset() {
	*x = SSLRemoveCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLRemoveCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLRemoveCertificateResponse) ProtoMessage() {}

func (x *SSLRemoveCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLRemoveCertificateResponse.ProtoReflect.Descriptor instead.
func (*SSLRemoveCertificateResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{21}
}

func (x *SSLRemoveCertificateResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *SSLRemoveCertificateResponse) GetRemoved() []*SSLCertificate {
	if x != nil {
		return x.Removed
	}
	return nil
}

type SSLDoRenewalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Force       bool   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	DryRun      bool   `protobuf:"varint,3,opt,name=dryRun,proto3" json:"dryRun,omitempty"`
	VirtualHost string `protobuf:"bytes,4,opt,name=virtualHost,proto3" json:"virtualHost,omitempty"`
}

func (x *SSLDoRenewalsRequest) Reset() {
	*x = SSLDoRenewalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLDoRenewalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLDoRenewalsRequest) ProtoMessage() {}

func (x *SSLDoRenewalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLDoRenewalsRequest.ProtoReflect.Descriptor instead.
func (*SSLDoRenewalsRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{22}
}

func (x *SSLDoRenewalsRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SSLDoRenewalsRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *SSLDoRenewalsRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *SSLDoRenewalsRequest) GetVirtualHost() string {
	if x != nil {
		return x.VirtualHost
	}
	return ""
}

type SSLDoRenewalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors  []*Error          `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	Renewed []*SSLCertificate `protobuf:"bytes,2,rep,name=renewed,proto3" json:"renewed,omitempty"`
}

func (x *SSLDoRenewalsResponse) Reset() {
	*x = SSLDoRenewalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLDoRenewalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLDoRenewalsResponse) ProtoMessage() {}

func (x *SSLDoRenewalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLDoRenewalsResponse.ProtoReflect.Descriptor instead.
func (*SSLDoRenewalsResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{23}
}

func (x *SSLDoRenewalsResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *SSLDoRenewalsResponse) GetRenewed() []*SSLCertificate {
	if x != nil {
		return x.Renewed
	}
	return nil
}

type SSLReuseCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User         string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	SourceDomain string `protobuf:"bytes,2,opt,name=sourceDomain,proto3" json:"sourceDomain,omitempty"`
	TargetDomain string `protobuf:"bytes,3,opt,name=targetDomain,proto3" json:"targetDomain,omitempty"`
}

func (x *SSLReuseCertificateRequest) Reset() {
	*x = SSLReuseCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLReuseCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLReuseCertificateRequest) ProtoMessage() {}

func (x *SSLReuseCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLReuseCertificateRequest.ProtoReflect.Descriptor instead.
func (*SSLReuseCertificateRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{24}
}

func (x *SSLReuseCertificateRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SSLReuseCertificateRequest) GetSourceDomain() string {
	if x != nil {
		return x.SourceDomain
	}
	return ""
}

func (x *SSLReuseCertificateRequest) GetTargetDomain() string {
	if x != nil {
		return x.TargetDomain
	}
	return ""
}

type SSLReuseCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *SSLReuseCertificateResponse) Reset() {
	*x = SSLReuseCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLReuseCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLReuseCertificateResponse) ProtoMessage() {}

func (x *SSLReuseCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLReuseCertificateResponse.ProtoReflect.Descriptor instead.
func (*SSLReuseCertificateResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{25}
}

func (x *SSLReuseCertificateResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type SSLRemoveReuseCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User         string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	TargetDomain string `protobuf:"bytes,2,opt,name=targetDomain,proto3" json:"targetDomain,omitempty"`
}

func (x *SSLRemoveReuseCertificateRequest) Reset() {
	*x = SSLRemoveReuseCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLRemoveReuseCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLRemoveReuseCertificateRequest) ProtoMessage() {}

func (x *SSLRemoveReuseCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLRemoveReuseCertificateRequest.ProtoReflect.Descriptor instead.
func (*SSLRemoveReuseCertificateRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{26}
}

func (x *SSLRemoveReuseCertificateRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SSLRemoveReuseCertificateRequest) GetTargetDomain() string {
	if x != nil {
		return x.TargetDomain
	}
	return ""
}

type SSLRemoveReuseCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *SSLRemoveReuseCertificateResponse) Reset() {
	*x = SSLRemoveReuseCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLRemoveReuseCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLRemoveReuseCertificateResponse) ProtoMessage() {}

func (x *SSLRemoveReuseCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLRemoveReuseCertificateResponse.ProtoReflect.Descriptor instead.
func (*SSLRemoveReuseCertificateResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{27}
}

func (x *SSLRemoveReuseCertificateResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type SSLReuseListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *SSLReuseListRequest) Reset() {
	*x = SSLReuseListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLReuseListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLReuseListRequest) ProtoMessage() {}

func (x *SSLReuseListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLReuseListRequest.ProtoReflect.Descriptor instead.
func (*SSLReuseListRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{28}
}

func (x *SSLReuseListRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type SSLReuseListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*Error          `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	Reuses map[string]string `protobuf:"bytes,2,rep,name=reuses,proto3" json:"reuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SSLReuseListResponse) Reset() {
	*x = SSLReuseListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLReuseListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLReuseListResponse) ProtoMessage() {}

func (x *SSLReuseListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLReuseListResponse.ProtoReflect.Descriptor instead.
func (*SSLReuseListResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{29}
}

func (x *SSLReuseListResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *SSLReuseListResponse) GetReuses() map[string]string {
	if x != nil {
		return x.Reuses
	}
	return nil
}

type SSLReinstallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User            string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Domain          string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	PreferredIssuer string `protobuf:"bytes,3,opt,name=preferredIssuer,proto3" json:"preferredIssuer,omitempty"`
}

func (x *SSLReinstallRequest) Reset() {
	*x = SSLReinstallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLReinstallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLReinstallRequest) ProtoMessage() {}

func (x *SSLReinstallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLReinstallRequest.ProtoReflect.Descriptor instead.
func (*SSLReinstallRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{30}
}

func (x *SSLReinstallRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SSLReinstallRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *SSLReinstallRequest) GetPreferredIssuer() string {
	if x != nil {
		return x.PreferredIssuer
	}
	return ""
}

type SSLReinstallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *SSLReinstallResponse) Reset() {
	*x = SSLReinstallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSLReinstallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSLReinstallResponse) ProtoMessage() {}

func (x *SSLReinstallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSLReinstallResponse.ProtoReflect.Descriptor instead.
func (*SSLReinstallResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{31}
}

func (x *SSLReinstallResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{32}
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{33}
}

func (x *PingResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Config
type ConfigEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Key         string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Value       string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConfigEntry) Reset() {
	*x = ConfigEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigEntry) ProtoMessage() {}

func (x *ConfigEntry) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigEntry.ProtoReflect.Descriptor instead.
func (*ConfigEntry) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{34}
}

func (x *ConfigEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigEntry) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ConfigEntry) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ConfigEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ConfigEntry) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ConfigGetEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigGetEntriesRequest) Reset() {
	*x = ConfigGetEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGetEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGetEntriesRequest) ProtoMessage() {}

func (x *ConfigGetEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGetEntriesRequest.ProtoReflect.Descriptor instead.
func (*ConfigGetEntriesRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{35}
}

type ConfigGetEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors  []*Error       `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	Entries []*ConfigEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ConfigGetEntriesResponse) Reset() {
	*x = ConfigGetEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGetEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGetEntriesResponse) ProtoMessage() {}

func (x *ConfigGetEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGetEntriesResponse.ProtoReflect.Descriptor instead.
func (*ConfigGetEntriesResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{36}
}

func (x *ConfigGetEntriesResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ConfigGetEntriesResponse) GetEntries() []*ConfigEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type ConfigUpdateEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*ConfigEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ConfigUpdateEntriesRequest) Reset() {
	*x = ConfigUpdateEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigUpdateEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigUpdateEntriesRequest) ProtoMessage() {}

func (x *ConfigUpdateEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigUpdateEntriesRequest.ProtoReflect.Descriptor instead.
func (*ConfigUpdateEntriesRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{37}
}

func (x *ConfigUpdateEntriesRequest) GetEntries() []*ConfigEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type ConfigUpdateEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ConfigUpdateEntriesResponse) Reset() {
	*x = ConfigUpdateEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigUpdateEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigUpdateEntriesResponse) ProtoMessage() {}

func (x *ConfigUpdateEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigUpdateEntriesResponse.ProtoReflect.Descriptor instead.
func (*ConfigUpdateEntriesResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{38}
}

func (x *ConfigUpdateEntriesResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Reporting
type ReportingForceRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportingForceRunRequest) Reset() {
	*x = ReportingForceRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportingForceRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportingForceRunRequest) ProtoMessage() {}

func (x *ReportingForceRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportingForceRunRequest.ProtoReflect.Descriptor instead.
func (*ReportingForceRunRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{39}
}

type ReportingForceRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ReportingForceRunResponse) Reset() {
	*x = ReportingForceRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportingForceRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportingForceRunResponse) ProtoMessage() {}

func (x *ReportingForceRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportingForceRunResponse.ProtoReflect.Descriptor instead.
func (*ReportingForceRunResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{40}
}

func (x *ReportingForceRunResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

// RPC
type RpcForceReloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RpcForceReloadRequest) Reset() {
	*x = RpcForceReloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcForceReloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcForceReloadRequest) ProtoMessage() {}

func (x *RpcForceReloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcForceReloadRequest.ProtoReflect.Descriptor instead.
func (*RpcForceReloadRequest) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{41}
}

type RpcForceReloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *RpcForceReloadResponse) Reset() {
	*x = RpcForceReloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_letsencrypt_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcForceReloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcForceReloadResponse) ProtoMessage() {}

func (x *RpcForceReloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_letsencrypt_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcForceReloadResponse.ProtoReflect.Descriptor instead.
func (*RpcForceReloadResponse) Descriptor() ([]byte, []int) {
	return file_letsencrypt_proto_rawDescGZIP(), []int{42}
}

func (x *RpcForceReloadResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_letsencrypt_proto protoreflect.FileDescriptor

var file_letsencrypt_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x3b, 0x0a, 0x1c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x3f, 0x0a, 0x1d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x53, 0x65,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x5a, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x37, 0x0a,
	0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x41, 0x64, 0x64, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x3e, 0x0a, 0x1c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x3a, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x22, 0x41, 0x0a, 0x1f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x3a, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x37, 0x0a, 0x18,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x53, 0x4c, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3b, 0x0a, 0x19, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x53, 0x4c,
	0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0x44, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x53, 0x4c, 0x52, 0x75, 0x6e,
	0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x22, 0xe7, 0x01, 0x0a, 0x19, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x53, 0x4c, 0x52, 0x75, 0x6e, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53,
	0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x53, 0x4c, 0x52, 0x75, 0x6e, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x1a, 0x38, 0x0a, 0x0a, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xba, 0x01, 0x0a, 0x0e, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x65, 0x72, 0x74, 0x50, 0x65, 0x6d, 0x22,
	0x30, 0x0a, 0x1a, 0x53, 0x53, 0x4c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x22, 0x72, 0x0a, 0x1b, 0x53, 0x53, 0x4c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x33, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x1a, 0x53, 0x53, 0x4c, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xf2, 0x01,
	0x0a, 0x1b, 0x53, 0x53, 0x4c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a,
	0x10, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x53, 0x53, 0x4c, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x1a, 0x38, 0x0a, 0x0a, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x6a, 0x0a, 0x1b, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x6e, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x22, 0x69,
	0x0a, 0x1c, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x29,
	0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x22, 0x7a, 0x0a, 0x14, 0x53, 0x53, 0x4c,
	0x44, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x72, 0x79, 0x52, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79,
	0x52, 0x75, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x48, 0x6f, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x15, 0x53, 0x53, 0x4c, 0x44, 0x6f, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x29,
	0x0a, 0x07, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x65, 0x64, 0x22, 0x78, 0x0a, 0x1a, 0x53, 0x53, 0x4c,
	0x52, 0x65, 0x75, 0x73, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x22, 0x3d, 0x0a, 0x1b, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x75, 0x73, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0x5a, 0x0a, 0x20, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x75, 0x73, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x43,
	0x0a, 0x21, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x75, 0x73, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0x29, 0x0a, 0x13, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x75, 0x73, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xac,
	0x01, 0x0a, 0x14, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x75,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x75, 0x73,
	0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x52, 0x65, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a,
	0x13, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x22, 0x36, 0x0a, 0x14, 0x53, 0x53,
	0x4c, 0x52, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x2e, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x22, 0x7f, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x62, 0x0a,
	0x18, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x44, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x3b, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22,
	0x17, 0x0a, 0x15, 0x52, 0x70, 0x63, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x38, 0x0a, 0x16, 0x52, 0x70, 0x63, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x32, 0xba, 0x0c, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x58, 0x0a,
	0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x53, 0x65, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x12, 0x1e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x17, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x18, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x53,
	0x4c, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x53, 0x4c, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x53, 0x4c,
	0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x53, 0x4c, 0x52,
	0x75, 0x6e, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x53, 0x53, 0x4c, 0x52, 0x75, 0x6e, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x53, 0x4c, 0x52, 0x75,
	0x6e, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x13, 0x53, 0x53, 0x4c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x53, 0x53, 0x4c, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x53, 0x53, 0x4c, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x13, 0x53, 0x53, 0x4c, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e,
	0x53, 0x53, 0x4c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x53, 0x53, 0x4c,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x14, 0x53, 0x53,
	0x4c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x2e, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x0d, 0x53, 0x53, 0x4c, 0x44, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61,
	0x6c, 0x73, 0x12, 0x15, 0x2e, 0x53, 0x53, 0x4c, 0x44, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x53, 0x53, 0x4c, 0x44,
	0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x13, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x75, 0x73, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x53, 0x53, 0x4c,
	0x52, 0x65, 0x75, 0x73, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x75,
	0x73, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x19, 0x53, 0x53, 0x4c, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x75, 0x73, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x75, 0x73, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x75, 0x73, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a,
	0x0c, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e,
	0x53, 0x53, 0x4c, 0x52, 0x65, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x75, 0x73, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x17,
	0x53, 0x53, 0x4c, 0x52, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x53, 0x53, 0x4c, 0x52, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x52, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x19, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x52, 0x70, 0x63, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x2e, 0x52, 0x70, 0x63, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x52, 0x70, 0x63, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67,
	0x12, 0x0c, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x43, 0x5a, 0x41, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2d, 0x63, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x2f, 0x6c, 0x65, 0x74, 0x73, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2d,
	0x63, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_letsencrypt_proto_rawDescOnce sync.Once
	file_letsencrypt_proto_rawDescData = file_letsencrypt_proto_rawDesc
)

func file_letsencrypt_proto_rawDescGZIP() []byte {
	file_letsencrypt_proto_rawDescOnce.Do(func() {
		file_letsencrypt_proto_rawDescData = protoimpl.X.CompressGZIP(file_letsencrypt_proto_rawDescData)
	})
	return file_letsencrypt_proto_rawDescData
}

var file_letsencrypt_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_letsencrypt_proto_goTypes = []interface{}{
	(*Error)(nil),                             // 0: Error
	(*ServiceCertSetEnabledRequest)(nil),      // 1: ServiceCertSetEnabledRequest
	(*ServiceCertSetEnabledResponse)(nil),     // 2: ServiceCertSetEnabledResponse
	(*ServiceCertListDomainsRequest)(nil),     // 3: ServiceCertListDomainsRequest
	(*ServiceCertListDomainsResponse)(nil),    // 4: ServiceCertListDomainsResponse
	(*ServiceCertAddDomainRequest)(nil),       // 5: ServiceCertAddDomainRequest
	(*ServiceCertAddDomainResponse)(nil),      // 6: ServiceCertAddDomainResponse
	(*ServiceCertRemoveDomainRequest)(nil),    // 7: ServiceCertRemoveDomainRequest
	(*ServiceCertRemoveDomainResponse)(nil),   // 8: ServiceCertRemoveDomainResponse
	(*ServiceCertResetRequest)(nil),           // 9: ServiceCertResetRequest
	(*ServiceCertResetResponse)(nil),          // 10: ServiceCertResetResponse
	(*AutoSSLSetEnabledRequest)(nil),          // 11: AutoSSLSetEnabledRequest
	(*AutoSSLSetEnabledResponse)(nil),         // 12: AutoSSLSetEnabledResponse
	(*AutoSSLRunForUserRequest)(nil),          // 13: AutoSSLRunForUserRequest
	(*AutoSSLRunForUserResponse)(nil),         // 14: AutoSSLRunForUserResponse
	(*SSLCertificate)(nil),                    // 15: SSLCertificate
	(*SSLListCertificatesRequest)(nil),        // 16: SSLListCertificatesRequest
	(*SSLListCertificatesResponse)(nil),       // 17: SSLListCertificatesResponse
	(*SSLIssueCertificateRequest)(nil),        // 18: SSLIssueCertificateRequest
	(*SSLIssueCertificateResponse)(nil),       // 19: SSLIssueCertificateResponse
	(*SSLRemoveCertificateRequest)(nil),       // 20: SSLRemoveCertificateRequest
	(*SSLRemoveCertificateResponse)(nil),      // 21: SSLRemoveCertificateResponse
	(*SSLDoRenewalsRequest)(nil),              // 22: SSLDoRenewalsRequest
	(*SSLDoRenewalsResponse)(nil),             // 23: SSLDoRenewalsResponse
	(*SSLReuseCertificateRequest)(nil),        // 24: SSLReuseCertificateRequest
	(*SSLReuseCertificateResponse)(nil),       // 25: SSLReuseCertificateResponse
	(*SSLRemoveReuseCertificateRequest)(nil),  // 26: SSLRemoveReuseCertificateRequest
	(*SSLRemoveReuseCertificateResponse)(nil), // 27: SSLRemoveReuseCertificateResponse
	(*SSLReuseListRequest)(nil),               // 28: SSLReuseListRequest
	(*SSLReuseListResponse)(nil),              // 29: SSLReuseListResponse
	(*SSLReinstallRequest)(nil),               // 30: SSLReinstallRequest
	(*SSLReinstallResponse)(nil),              // 31: SSLReinstallResponse
	(*PingRequest)(nil),                       // 32: PingRequest
	(*PingResponse)(nil),                      // 33: PingResponse
	(*ConfigEntry)(nil),                       // 34: ConfigEntry
	(*ConfigGetEntriesRequest)(nil),           // 35: ConfigGetEntriesRequest
	(*ConfigGetEntriesResponse)(nil),          // 36: ConfigGetEntriesResponse
	(*ConfigUpdateEntriesRequest)(nil),        // 37: ConfigUpdateEntriesRequest
	(*ConfigUpdateEntriesResponse)(nil),       // 38: ConfigUpdateEntriesResponse
	(*ReportingForceRunRequest)(nil),          // 39: ReportingForceRunRequest
	(*ReportingForceRunResponse)(nil),         // 40: ReportingForceRunResponse
	(*RpcForceReloadRequest)(nil),             // 41: RpcForceReloadRequest
	(*RpcForceReloadResponse)(nil),            // 42: RpcForceReloadResponse
	nil,                                       // 43: AutoSSLRunForUserResponse.DebugEntry
	nil,                                       // 44: SSLIssueCertificateResponse.DebugEntry
	nil,                                       // 45: SSLReuseListResponse.ReusesEntry
}
var file_letsencrypt_proto_depIdxs = []int32{
	0,  // 0: ServiceCertSetEnabledResponse.errors:type_name -> Error
	0,  // 1: ServiceCertListDomainsResponse.errors:type_name -> Error
	0,  // 2: ServiceCertAddDomainResponse.errors:type_name -> Error
	0,  // 3: ServiceCertRemoveDomainResponse.errors:type_name -> Error
	0,  // 4: ServiceCertResetResponse.errors:type_name -> Error
	0,  // 5: AutoSSLSetEnabledResponse.errors:type_name -> Error
	0,  // 6: AutoSSLRunForUserResponse.errors:type_name -> Error
	15, // 7: AutoSSLRunForUserResponse.certificates:type_name -> SSLCertificate
	43, // 8: AutoSSLRunForUserResponse.debug:type_name -> AutoSSLRunForUserResponse.DebugEntry
	0,  // 9: SSLListCertificatesResponse.errors:type_name -> Error
	15, // 10: SSLListCertificatesResponse.certificates:type_name -> SSLCertificate
	0,  // 11: SSLIssueCertificateResponse.errors:type_name -> Error
	15, // 12: SSLIssueCertificateResponse.new_certificates:type_name -> SSLCertificate
	44, // 13: SSLIssueCertificateResponse.debug:type_name -> SSLIssueCertificateResponse.DebugEntry
	0,  // 14: SSLRemoveCertificateResponse.errors:type_name -> Error
	15, // 15: SSLRemoveCertificateResponse.removed:type_name -> SSLCertificate
	0,  // 16: SSLDoRenewalsResponse.errors:type_name -> Error
	15, // 17: SSLDoRenewalsResponse.renewed:type_name -> SSLCertificate
	0,  // 18: SSLReuseCertificateResponse.errors:type_name -> Error
	0,  // 19: SSLRemoveReuseCertificateResponse.errors:type_name -> Error
	0,  // 20: SSLReuseListResponse.errors:type_name -> Error
	45, // 21: SSLReuseListResponse.reuses:type_name -> SSLReuseListResponse.ReusesEntry
	0,  // 22: SSLReinstallResponse.errors:type_name -> Error
	0,  // 23: PingResponse.errors:type_name -> Error
	0,  // 24: ConfigGetEntriesResponse.errors:type_name -> Error
	34, // 25: ConfigGetEntriesResponse.entries:type_name -> ConfigEntry
	34, // 26: ConfigUpdateEntriesRequest.entries:type_name -> ConfigEntry
	0,  // 27: ConfigUpdateEntriesResponse.errors:type_name -> Error
	0,  // 28: ReportingForceRunResponse.errors:type_name -> Error
	0,  // 29: RpcForceReloadResponse.errors:type_name -> Error
	1,  // 30: Plugin.ServiceCertSetEnabled:input_type -> ServiceCertSetEnabledRequest
	3,  // 31: Plugin.ServiceCertListDomains:input_type -> ServiceCertListDomainsRequest
	5,  // 32: Plugin.ServiceCertAddDomain:input_type -> ServiceCertAddDomainRequest
	7,  // 33: Plugin.ServiceCertRemoveDomain:input_type -> ServiceCertRemoveDomainRequest
	9,  // 34: Plugin.ServiceCertReset:input_type -> ServiceCertResetRequest
	11, // 35: Plugin.AutoSSLSetEnabled:input_type -> AutoSSLSetEnabledRequest
	13, // 36: Plugin.AutoSSLRunForUser:input_type -> AutoSSLRunForUserRequest
	16, // 37: Plugin.SSLListCertificates:input_type -> SSLListCertificatesRequest
	18, // 38: Plugin.SSLIssueCertificate:input_type -> SSLIssueCertificateRequest
	20, // 39: Plugin.SSLRemoveCertificate:input_type -> SSLRemoveCertificateRequest
	22, // 40: Plugin.SSLDoRenewals:input_type -> SSLDoRenewalsRequest
	24, // 41: Plugin.SSLReuseCertificate:input_type -> SSLReuseCertificateRequest
	26, // 42: Plugin.SSLRemoveReuseCertificate:input_type -> SSLRemoveReuseCertificateRequest
	28, // 43: Plugin.SSLReuseList:input_type -> SSLReuseListRequest
	30, // 44: Plugin.SSLReinstallCertificate:input_type -> SSLReinstallRequest
	35, // 45: Plugin.ConfigGetEntries:input_type -> ConfigGetEntriesRequest
	37, // 46: Plugin.ConfigUpdateEntries:input_type -> ConfigUpdateEntriesRequest
	39, // 47: Plugin.ReportingForceRun:input_type -> ReportingForceRunRequest
	41, // 48: Plugin.RpcForceReload:input_type -> RpcForceReloadRequest
	32, // 49: Plugin.Ping:input_type -> PingRequest
	2,  // 50: Plugin.ServiceCertSetEnabled:output_type -> ServiceCertSetEnabledResponse
	4,  // 51: Plugin.ServiceCertListDomains:output_type -> ServiceCertListDomainsResponse
	6,  // 52: Plugin.ServiceCertAddDomain:output_type -> ServiceCertAddDomainResponse
	8,  // 53: Plugin.ServiceCertRemoveDomain:output_type -> ServiceCertRemoveDomainResponse
	10, // 54: Plugin.ServiceCertReset:output_type -> ServiceCertResetResponse
	12, // 55: Plugin.AutoSSLSetEnabled:output_type -> AutoSSLSetEnabledResponse
	14, // 56: Plugin.AutoSSLRunForUser:output_type -> AutoSSLRunForUserResponse
	17, // 57: Plugin.SSLListCertificates:output_type -> SSLListCertificatesResponse
	19, // 58: Plugin.SSLIssueCertificate:output_type -> SSLIssueCertificateResponse
	21, // 59: Plugin.SSLRemoveCertificate:output_type -> SSLRemoveCertificateResponse
	23, // 60: Plugin.SSLDoRenewals:output_type -> SSLDoRenewalsResponse
	25, // 61: Plugin.SSLReuseCertificate:output_type -> SSLReuseCertificateResponse
	27, // 62: Plugin.SSLRemoveReuseCertificate:output_type -> SSLRemoveReuseCertificateResponse
	29, // 63: Plugin.SSLReuseList:output_type -> SSLReuseListResponse
	31, // 64: Plugin.SSLReinstallCertificate:output_type -> SSLReinstallResponse
	36, // 65: Plugin.ConfigGetEntries:output_type -> ConfigGetEntriesResponse
	38, // 66: Plugin.ConfigUpdateEntries:output_type -> ConfigUpdateEntriesResponse
	40, // 67: Plugin.ReportingForceRun:output_type -> ReportingForceRunResponse
	42, // 68: Plugin.RpcForceReload:output_type -> RpcForceReloadResponse
	33, // 69: Plugin.Ping:output_type -> PingResponse
	50, // [50:70] is the sub-list for method output_type
	30, // [30:50] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_letsencrypt_proto_init() }
func file_letsencrypt_proto_init() {
	if File_letsencrypt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_letsencrypt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceCertSetEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceCertSetEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceCertListDomainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceCertListDomainsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceCertAddDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceCertAddDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceCertRemoveDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceCertRemoveDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceCertResetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceCertResetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoSSLSetEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoSSLSetEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoSSLRunForUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoSSLRunForUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSLCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSLListCertificatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSLListCertificatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSLIssueCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSLIssueCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSLRemoveCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSLRemoveCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSLDoRenewalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSLDoRenewalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSLReuseCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSLReuseCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSLRemoveReuseCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSLRemoveReuseCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSLReuseListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSLReuseListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSLReinstallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSLReinstallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigGetEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigGetEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigUpdateEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigUpdateEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportingForceRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportingForceRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcForceReloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_letsencrypt_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcForceReloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_letsencrypt_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_letsencrypt_proto_goTypes,
		DependencyIndexes: file_letsencrypt_proto_depIdxs,
		MessageInfos:      file_letsencrypt_proto_msgTypes,
	}.Build()
	File_letsencrypt_proto = out.File
	file_letsencrypt_proto_rawDesc = nil
	file_letsencrypt_proto_goTypes = nil
	file_letsencrypt_proto_depIdxs = nil
}
