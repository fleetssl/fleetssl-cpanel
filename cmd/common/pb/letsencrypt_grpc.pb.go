// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginClient is the client API for Plugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginClient interface {
	// Service Certs
	ServiceCertSetEnabled(ctx context.Context, in *ServiceCertSetEnabledRequest, opts ...grpc.CallOption) (*ServiceCertSetEnabledResponse, error)
	ServiceCertListDomains(ctx context.Context, in *ServiceCertListDomainsRequest, opts ...grpc.CallOption) (*ServiceCertListDomainsResponse, error)
	ServiceCertAddDomain(ctx context.Context, in *ServiceCertAddDomainRequest, opts ...grpc.CallOption) (*ServiceCertAddDomainResponse, error)
	ServiceCertRemoveDomain(ctx context.Context, in *ServiceCertRemoveDomainRequest, opts ...grpc.CallOption) (*ServiceCertRemoveDomainResponse, error)
	ServiceCertReset(ctx context.Context, in *ServiceCertResetRequest, opts ...grpc.CallOption) (*ServiceCertResetResponse, error)
	// AutoSSL
	AutoSSLSetEnabled(ctx context.Context, in *AutoSSLSetEnabledRequest, opts ...grpc.CallOption) (*AutoSSLSetEnabledResponse, error)
	AutoSSLRunForUser(ctx context.Context, in *AutoSSLRunForUserRequest, opts ...grpc.CallOption) (*AutoSSLRunForUserResponse, error)
	// Normal SSL
	SSLListCertificates(ctx context.Context, in *SSLListCertificatesRequest, opts ...grpc.CallOption) (*SSLListCertificatesResponse, error)
	SSLIssueCertificate(ctx context.Context, in *SSLIssueCertificateRequest, opts ...grpc.CallOption) (*SSLIssueCertificateResponse, error)
	SSLRemoveCertificate(ctx context.Context, in *SSLRemoveCertificateRequest, opts ...grpc.CallOption) (*SSLRemoveCertificateResponse, error)
	SSLDoRenewals(ctx context.Context, in *SSLDoRenewalsRequest, opts ...grpc.CallOption) (*SSLDoRenewalsResponse, error)
	SSLReuseCertificate(ctx context.Context, in *SSLReuseCertificateRequest, opts ...grpc.CallOption) (*SSLReuseCertificateResponse, error)
	SSLRemoveReuseCertificate(ctx context.Context, in *SSLRemoveReuseCertificateRequest, opts ...grpc.CallOption) (*SSLRemoveReuseCertificateResponse, error)
	SSLReuseList(ctx context.Context, in *SSLReuseListRequest, opts ...grpc.CallOption) (*SSLReuseListResponse, error)
	SSLReinstallCertificate(ctx context.Context, in *SSLReinstallRequest, opts ...grpc.CallOption) (*SSLReinstallResponse, error)
	// Config
	ConfigGetEntries(ctx context.Context, in *ConfigGetEntriesRequest, opts ...grpc.CallOption) (*ConfigGetEntriesResponse, error)
	ConfigUpdateEntries(ctx context.Context, in *ConfigUpdateEntriesRequest, opts ...grpc.CallOption) (*ConfigUpdateEntriesResponse, error)
	// Reporting
	ReportingForceRun(ctx context.Context, in *ReportingForceRunRequest, opts ...grpc.CallOption) (*ReportingForceRunResponse, error)
	// RPC
	RpcForceReload(ctx context.Context, in *RpcForceReloadRequest, opts ...grpc.CallOption) (*RpcForceReloadResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type pluginClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginClient(cc grpc.ClientConnInterface) PluginClient {
	return &pluginClient{cc}
}

func (c *pluginClient) ServiceCertSetEnabled(ctx context.Context, in *ServiceCertSetEnabledRequest, opts ...grpc.CallOption) (*ServiceCertSetEnabledResponse, error) {
	out := new(ServiceCertSetEnabledResponse)
	err := c.cc.Invoke(ctx, "/Plugin/ServiceCertSetEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) ServiceCertListDomains(ctx context.Context, in *ServiceCertListDomainsRequest, opts ...grpc.CallOption) (*ServiceCertListDomainsResponse, error) {
	out := new(ServiceCertListDomainsResponse)
	err := c.cc.Invoke(ctx, "/Plugin/ServiceCertListDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) ServiceCertAddDomain(ctx context.Context, in *ServiceCertAddDomainRequest, opts ...grpc.CallOption) (*ServiceCertAddDomainResponse, error) {
	out := new(ServiceCertAddDomainResponse)
	err := c.cc.Invoke(ctx, "/Plugin/ServiceCertAddDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) ServiceCertRemoveDomain(ctx context.Context, in *ServiceCertRemoveDomainRequest, opts ...grpc.CallOption) (*ServiceCertRemoveDomainResponse, error) {
	out := new(ServiceCertRemoveDomainResponse)
	err := c.cc.Invoke(ctx, "/Plugin/ServiceCertRemoveDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) ServiceCertReset(ctx context.Context, in *ServiceCertResetRequest, opts ...grpc.CallOption) (*ServiceCertResetResponse, error) {
	out := new(ServiceCertResetResponse)
	err := c.cc.Invoke(ctx, "/Plugin/ServiceCertReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) AutoSSLSetEnabled(ctx context.Context, in *AutoSSLSetEnabledRequest, opts ...grpc.CallOption) (*AutoSSLSetEnabledResponse, error) {
	out := new(AutoSSLSetEnabledResponse)
	err := c.cc.Invoke(ctx, "/Plugin/AutoSSLSetEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) AutoSSLRunForUser(ctx context.Context, in *AutoSSLRunForUserRequest, opts ...grpc.CallOption) (*AutoSSLRunForUserResponse, error) {
	out := new(AutoSSLRunForUserResponse)
	err := c.cc.Invoke(ctx, "/Plugin/AutoSSLRunForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) SSLListCertificates(ctx context.Context, in *SSLListCertificatesRequest, opts ...grpc.CallOption) (*SSLListCertificatesResponse, error) {
	out := new(SSLListCertificatesResponse)
	err := c.cc.Invoke(ctx, "/Plugin/SSLListCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) SSLIssueCertificate(ctx context.Context, in *SSLIssueCertificateRequest, opts ...grpc.CallOption) (*SSLIssueCertificateResponse, error) {
	out := new(SSLIssueCertificateResponse)
	err := c.cc.Invoke(ctx, "/Plugin/SSLIssueCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) SSLRemoveCertificate(ctx context.Context, in *SSLRemoveCertificateRequest, opts ...grpc.CallOption) (*SSLRemoveCertificateResponse, error) {
	out := new(SSLRemoveCertificateResponse)
	err := c.cc.Invoke(ctx, "/Plugin/SSLRemoveCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) SSLDoRenewals(ctx context.Context, in *SSLDoRenewalsRequest, opts ...grpc.CallOption) (*SSLDoRenewalsResponse, error) {
	out := new(SSLDoRenewalsResponse)
	err := c.cc.Invoke(ctx, "/Plugin/SSLDoRenewals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) SSLReuseCertificate(ctx context.Context, in *SSLReuseCertificateRequest, opts ...grpc.CallOption) (*SSLReuseCertificateResponse, error) {
	out := new(SSLReuseCertificateResponse)
	err := c.cc.Invoke(ctx, "/Plugin/SSLReuseCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) SSLRemoveReuseCertificate(ctx context.Context, in *SSLRemoveReuseCertificateRequest, opts ...grpc.CallOption) (*SSLRemoveReuseCertificateResponse, error) {
	out := new(SSLRemoveReuseCertificateResponse)
	err := c.cc.Invoke(ctx, "/Plugin/SSLRemoveReuseCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) SSLReuseList(ctx context.Context, in *SSLReuseListRequest, opts ...grpc.CallOption) (*SSLReuseListResponse, error) {
	out := new(SSLReuseListResponse)
	err := c.cc.Invoke(ctx, "/Plugin/SSLReuseList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) SSLReinstallCertificate(ctx context.Context, in *SSLReinstallRequest, opts ...grpc.CallOption) (*SSLReinstallResponse, error) {
	out := new(SSLReinstallResponse)
	err := c.cc.Invoke(ctx, "/Plugin/SSLReinstallCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) ConfigGetEntries(ctx context.Context, in *ConfigGetEntriesRequest, opts ...grpc.CallOption) (*ConfigGetEntriesResponse, error) {
	out := new(ConfigGetEntriesResponse)
	err := c.cc.Invoke(ctx, "/Plugin/ConfigGetEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) ConfigUpdateEntries(ctx context.Context, in *ConfigUpdateEntriesRequest, opts ...grpc.CallOption) (*ConfigUpdateEntriesResponse, error) {
	out := new(ConfigUpdateEntriesResponse)
	err := c.cc.Invoke(ctx, "/Plugin/ConfigUpdateEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) ReportingForceRun(ctx context.Context, in *ReportingForceRunRequest, opts ...grpc.CallOption) (*ReportingForceRunResponse, error) {
	out := new(ReportingForceRunResponse)
	err := c.cc.Invoke(ctx, "/Plugin/ReportingForceRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) RpcForceReload(ctx context.Context, in *RpcForceReloadRequest, opts ...grpc.CallOption) (*RpcForceReloadResponse, error) {
	out := new(RpcForceReloadResponse)
	err := c.cc.Invoke(ctx, "/Plugin/RpcForceReload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/Plugin/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServer is the server API for Plugin service.
// All implementations must embed UnimplementedPluginServer
// for forward compatibility
type PluginServer interface {
	// Service Certs
	ServiceCertSetEnabled(context.Context, *ServiceCertSetEnabledRequest) (*ServiceCertSetEnabledResponse, error)
	ServiceCertListDomains(context.Context, *ServiceCertListDomainsRequest) (*ServiceCertListDomainsResponse, error)
	ServiceCertAddDomain(context.Context, *ServiceCertAddDomainRequest) (*ServiceCertAddDomainResponse, error)
	ServiceCertRemoveDomain(context.Context, *ServiceCertRemoveDomainRequest) (*ServiceCertRemoveDomainResponse, error)
	ServiceCertReset(context.Context, *ServiceCertResetRequest) (*ServiceCertResetResponse, error)
	// AutoSSL
	AutoSSLSetEnabled(context.Context, *AutoSSLSetEnabledRequest) (*AutoSSLSetEnabledResponse, error)
	AutoSSLRunForUser(context.Context, *AutoSSLRunForUserRequest) (*AutoSSLRunForUserResponse, error)
	// Normal SSL
	SSLListCertificates(context.Context, *SSLListCertificatesRequest) (*SSLListCertificatesResponse, error)
	SSLIssueCertificate(context.Context, *SSLIssueCertificateRequest) (*SSLIssueCertificateResponse, error)
	SSLRemoveCertificate(context.Context, *SSLRemoveCertificateRequest) (*SSLRemoveCertificateResponse, error)
	SSLDoRenewals(context.Context, *SSLDoRenewalsRequest) (*SSLDoRenewalsResponse, error)
	SSLReuseCertificate(context.Context, *SSLReuseCertificateRequest) (*SSLReuseCertificateResponse, error)
	SSLRemoveReuseCertificate(context.Context, *SSLRemoveReuseCertificateRequest) (*SSLRemoveReuseCertificateResponse, error)
	SSLReuseList(context.Context, *SSLReuseListRequest) (*SSLReuseListResponse, error)
	SSLReinstallCertificate(context.Context, *SSLReinstallRequest) (*SSLReinstallResponse, error)
	// Config
	ConfigGetEntries(context.Context, *ConfigGetEntriesRequest) (*ConfigGetEntriesResponse, error)
	ConfigUpdateEntries(context.Context, *ConfigUpdateEntriesRequest) (*ConfigUpdateEntriesResponse, error)
	// Reporting
	ReportingForceRun(context.Context, *ReportingForceRunRequest) (*ReportingForceRunResponse, error)
	// RPC
	RpcForceReload(context.Context, *RpcForceReloadRequest) (*RpcForceReloadResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedPluginServer()
}

// UnimplementedPluginServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServer struct {
}

func (UnimplementedPluginServer) ServiceCertSetEnabled(context.Context, *ServiceCertSetEnabledRequest) (*ServiceCertSetEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceCertSetEnabled not implemented")
}
func (UnimplementedPluginServer) ServiceCertListDomains(context.Context, *ServiceCertListDomainsRequest) (*ServiceCertListDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceCertListDomains not implemented")
}
func (UnimplementedPluginServer) ServiceCertAddDomain(context.Context, *ServiceCertAddDomainRequest) (*ServiceCertAddDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceCertAddDomain not implemented")
}
func (UnimplementedPluginServer) ServiceCertRemoveDomain(context.Context, *ServiceCertRemoveDomainRequest) (*ServiceCertRemoveDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceCertRemoveDomain not implemented")
}
func (UnimplementedPluginServer) ServiceCertReset(context.Context, *ServiceCertResetRequest) (*ServiceCertResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceCertReset not implemented")
}
func (UnimplementedPluginServer) AutoSSLSetEnabled(context.Context, *AutoSSLSetEnabledRequest) (*AutoSSLSetEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoSSLSetEnabled not implemented")
}
func (UnimplementedPluginServer) AutoSSLRunForUser(context.Context, *AutoSSLRunForUserRequest) (*AutoSSLRunForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoSSLRunForUser not implemented")
}
func (UnimplementedPluginServer) SSLListCertificates(context.Context, *SSLListCertificatesRequest) (*SSLListCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SSLListCertificates not implemented")
}
func (UnimplementedPluginServer) SSLIssueCertificate(context.Context, *SSLIssueCertificateRequest) (*SSLIssueCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SSLIssueCertificate not implemented")
}
func (UnimplementedPluginServer) SSLRemoveCertificate(context.Context, *SSLRemoveCertificateRequest) (*SSLRemoveCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SSLRemoveCertificate not implemented")
}
func (UnimplementedPluginServer) SSLDoRenewals(context.Context, *SSLDoRenewalsRequest) (*SSLDoRenewalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SSLDoRenewals not implemented")
}
func (UnimplementedPluginServer) SSLReuseCertificate(context.Context, *SSLReuseCertificateRequest) (*SSLReuseCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SSLReuseCertificate not implemented")
}
func (UnimplementedPluginServer) SSLRemoveReuseCertificate(context.Context, *SSLRemoveReuseCertificateRequest) (*SSLRemoveReuseCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SSLRemoveReuseCertificate not implemented")
}
func (UnimplementedPluginServer) SSLReuseList(context.Context, *SSLReuseListRequest) (*SSLReuseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SSLReuseList not implemented")
}
func (UnimplementedPluginServer) SSLReinstallCertificate(context.Context, *SSLReinstallRequest) (*SSLReinstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SSLReinstallCertificate not implemented")
}
func (UnimplementedPluginServer) ConfigGetEntries(context.Context, *ConfigGetEntriesRequest) (*ConfigGetEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetEntries not implemented")
}
func (UnimplementedPluginServer) ConfigUpdateEntries(context.Context, *ConfigUpdateEntriesRequest) (*ConfigUpdateEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdateEntries not implemented")
}
func (UnimplementedPluginServer) ReportingForceRun(context.Context, *ReportingForceRunRequest) (*ReportingForceRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportingForceRun not implemented")
}
func (UnimplementedPluginServer) RpcForceReload(context.Context, *RpcForceReloadRequest) (*RpcForceReloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcForceReload not implemented")
}
func (UnimplementedPluginServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPluginServer) mustEmbedUnimplementedPluginServer() {}

// UnsafePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServer will
// result in compilation errors.
type UnsafePluginServer interface {
	mustEmbedUnimplementedPluginServer()
}

func RegisterPluginServer(s grpc.ServiceRegistrar, srv PluginServer) {
	s.RegisterService(&Plugin_ServiceDesc, srv)
}

func _Plugin_ServiceCertSetEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceCertSetEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).ServiceCertSetEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/ServiceCertSetEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).ServiceCertSetEnabled(ctx, req.(*ServiceCertSetEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_ServiceCertListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceCertListDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).ServiceCertListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/ServiceCertListDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).ServiceCertListDomains(ctx, req.(*ServiceCertListDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_ServiceCertAddDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceCertAddDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).ServiceCertAddDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/ServiceCertAddDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).ServiceCertAddDomain(ctx, req.(*ServiceCertAddDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_ServiceCertRemoveDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceCertRemoveDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).ServiceCertRemoveDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/ServiceCertRemoveDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).ServiceCertRemoveDomain(ctx, req.(*ServiceCertRemoveDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_ServiceCertReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceCertResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).ServiceCertReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/ServiceCertReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).ServiceCertReset(ctx, req.(*ServiceCertResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_AutoSSLSetEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoSSLSetEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).AutoSSLSetEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/AutoSSLSetEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).AutoSSLSetEnabled(ctx, req.(*AutoSSLSetEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_AutoSSLRunForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoSSLRunForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).AutoSSLRunForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/AutoSSLRunForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).AutoSSLRunForUser(ctx, req.(*AutoSSLRunForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_SSLListCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSLListCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).SSLListCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/SSLListCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).SSLListCertificates(ctx, req.(*SSLListCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_SSLIssueCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSLIssueCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).SSLIssueCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/SSLIssueCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).SSLIssueCertificate(ctx, req.(*SSLIssueCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_SSLRemoveCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSLRemoveCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).SSLRemoveCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/SSLRemoveCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).SSLRemoveCertificate(ctx, req.(*SSLRemoveCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_SSLDoRenewals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSLDoRenewalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).SSLDoRenewals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/SSLDoRenewals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).SSLDoRenewals(ctx, req.(*SSLDoRenewalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_SSLReuseCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSLReuseCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).SSLReuseCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/SSLReuseCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).SSLReuseCertificate(ctx, req.(*SSLReuseCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_SSLRemoveReuseCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSLRemoveReuseCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).SSLRemoveReuseCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/SSLRemoveReuseCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).SSLRemoveReuseCertificate(ctx, req.(*SSLRemoveReuseCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_SSLReuseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSLReuseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).SSLReuseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/SSLReuseList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).SSLReuseList(ctx, req.(*SSLReuseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_SSLReinstallCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSLReinstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).SSLReinstallCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/SSLReinstallCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).SSLReinstallCertificate(ctx, req.(*SSLReinstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_ConfigGetEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).ConfigGetEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/ConfigGetEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).ConfigGetEntries(ctx, req.(*ConfigGetEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_ConfigUpdateEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigUpdateEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).ConfigUpdateEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/ConfigUpdateEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).ConfigUpdateEntries(ctx, req.(*ConfigUpdateEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_ReportingForceRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportingForceRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).ReportingForceRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/ReportingForceRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).ReportingForceRun(ctx, req.(*ReportingForceRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_RpcForceReload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcForceReloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).RpcForceReload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/RpcForceReload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).RpcForceReload(ctx, req.(*RpcForceReloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plugin/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Plugin_ServiceDesc is the grpc.ServiceDesc for Plugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Plugin",
	HandlerType: (*PluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceCertSetEnabled",
			Handler:    _Plugin_ServiceCertSetEnabled_Handler,
		},
		{
			MethodName: "ServiceCertListDomains",
			Handler:    _Plugin_ServiceCertListDomains_Handler,
		},
		{
			MethodName: "ServiceCertAddDomain",
			Handler:    _Plugin_ServiceCertAddDomain_Handler,
		},
		{
			MethodName: "ServiceCertRemoveDomain",
			Handler:    _Plugin_ServiceCertRemoveDomain_Handler,
		},
		{
			MethodName: "ServiceCertReset",
			Handler:    _Plugin_ServiceCertReset_Handler,
		},
		{
			MethodName: "AutoSSLSetEnabled",
			Handler:    _Plugin_AutoSSLSetEnabled_Handler,
		},
		{
			MethodName: "AutoSSLRunForUser",
			Handler:    _Plugin_AutoSSLRunForUser_Handler,
		},
		{
			MethodName: "SSLListCertificates",
			Handler:    _Plugin_SSLListCertificates_Handler,
		},
		{
			MethodName: "SSLIssueCertificate",
			Handler:    _Plugin_SSLIssueCertificate_Handler,
		},
		{
			MethodName: "SSLRemoveCertificate",
			Handler:    _Plugin_SSLRemoveCertificate_Handler,
		},
		{
			MethodName: "SSLDoRenewals",
			Handler:    _Plugin_SSLDoRenewals_Handler,
		},
		{
			MethodName: "SSLReuseCertificate",
			Handler:    _Plugin_SSLReuseCertificate_Handler,
		},
		{
			MethodName: "SSLRemoveReuseCertificate",
			Handler:    _Plugin_SSLRemoveReuseCertificate_Handler,
		},
		{
			MethodName: "SSLReuseList",
			Handler:    _Plugin_SSLReuseList_Handler,
		},
		{
			MethodName: "SSLReinstallCertificate",
			Handler:    _Plugin_SSLReinstallCertificate_Handler,
		},
		{
			MethodName: "ConfigGetEntries",
			Handler:    _Plugin_ConfigGetEntries_Handler,
		},
		{
			MethodName: "ConfigUpdateEntries",
			Handler:    _Plugin_ConfigUpdateEntries_Handler,
		},
		{
			MethodName: "ReportingForceRun",
			Handler:    _Plugin_ReportingForceRun_Handler,
		},
		{
			MethodName: "RpcForceReload",
			Handler:    _Plugin_RpcForceReload_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Plugin_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "letsencrypt.proto",
}
